name: Fetch Deployment Logs

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  fetch-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: |
          echo "PROJECT_NAME=tecnoesis-2024" >> $GITHUB_ENV
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
          echo "ACCOUNT_ID=a78f164886c715236ce6aad68eb42d3e" >> $GITHUB_ENV
          echo "PR_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Wait for Cloudflare Pages build and fetch logs
        id: fetch_logs
        run: |
          fetch_latest_deployment() {
              RESPONSE=$(curl -s -X GET \
                  "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments" \
                  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                  -H "Content-Type: application/json")
              
              if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
                  LATEST_DEPLOYMENT=$(echo "$RESPONSE" | jq -c --arg branch "$PR_BRANCH" '.result | map(select(.deployment_trigger.metadata.branch == $branch)) | max_by(.created_on)')
                  echo "$LATEST_DEPLOYMENT"
              else
                  echo "Cloudflare API request failed. Response:"
                  echo "$RESPONSE" | jq '.'
                  exit 1
              fi
          }

          wait_for_build_completion() {
              MAX_ATTEMPTS=30
              ATTEMPT=0
              SLEEP_TIME=20

              while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
                  DEPLOYMENT=$(fetch_latest_deployment)
                  STATUS=$(echo "$DEPLOYMENT" | jq -r '.latest_stage.status')

                  if [ "$STATUS" = "success" ] || [ "$STATUS" = "failed" ]; then
                      echo "Build completed with status: $STATUS"
                      return 0
                  elif [ "$STATUS" = "canceled" ]; then
                      echo "Build was canceled"
                      return 1
                  fi

                  echo "Build still in progress. Waiting..."
                  sleep $SLEEP_TIME
                  ATTEMPT=$((ATTEMPT + 1))
              done

              echo "Timeout waiting for build to complete"
              return 1
          }

          fetchlogs() {
            DEPLOYMENT=$1
            if [ -z "$DEPLOYMENT" ]; then
                echo "No deployments found for branch: $PR_BRANCH."
                exit 0
            fi
            DEPLOYMENT_ID=$(echo "$DEPLOYMENT" | jq -r '.id')
            echo "\`\`\`"

            echo "Fetching deployment logs for deployment: $DEPLOYMENT_ID"

            # Fetch the deployment logs using the correct endpoint
            LOGS_RESPONSE=$(curl -s -X GET \
                "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments/$DEPLOYMENT_ID/history/logs" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json")

            if echo "$LOGS_RESPONSE" | jq -e '.success == true' > /dev/null; then
                echo "Deployment Log Summary:"
                echo "========================"

                # Extract and display total log entries
                TOTAL_LOGS=$(echo "$LOGS_RESPONSE" | jq -r '.result.total')
                echo "Total log entries: $TOTAL_LOGS"
                echo ""

                # Parse and display log entries
                echo "$LOGS_RESPONSE" | jq -r '.result.data[] | "\(.ts) | \(.line)"' | while read -r log_entry; do
                    timestamp=$(echo "$log_entry" | cut -d'|' -f1 | xargs)
                    message=$(echo "$log_entry" | cut -d'|' -f2- | xargs)
                    echo "DEBUG: Raw message: $message" >&2

                    # Check for important messages and format accordingly
                    case "$message" in
                        "Cloning repository..."*)
                            echo -e "\n[STEP] $message"
                            ;;
                        "Success: Finished cloning repository files")
                            echo -e "[SUCCESS] $message\n"
                            ;;
                        "Installing project dependencies:"*)
                            echo -e "\n[STEP] $message"
                            ;;
                        "Error:"*|"Failed:"*)
                            echo -e "\n[ERROR] $message"
                            ;;
                        *"ERR_PNPM"*)
                            echo -e "[ERROR] $message"
                            ;;
                        "Detected the following tools"*)
                            echo -e "\n[INFO] $message"
                            ;;
                        *)
                            echo "[$timestamp] $message"
                            ;;
                    esac
                done
            else
                echo "Failed to fetch deployment logs. API Response:"
                echo "$LOGS_RESPONSE" | jq '.'
            fi
            echo "\`\`\`"
          }

          if wait_for_build_completion; then
              latest_deployment=$(fetch_latest_deployment)
              BUILD_LOGS=$(fetchlogs "$latest_deployment")
              echo "logs<<EOF" >> $GITHUB_ENV
              echo "$BUILD_LOGS" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
          else
              echo "Failed to fetch logs: Build did not complete successfully"
              exit 1
          fi

      - name: Post build logs to PR
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildLogs = process.env.logs || 'No logs available.';
            const commentBody = `Cloudflare Pages build logs for branch **${{ github.head_ref }}**:\n\n${buildLogs}`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Post build status
        if: always()
        run: |
          echo "Build status: ${{ job.status }}"
