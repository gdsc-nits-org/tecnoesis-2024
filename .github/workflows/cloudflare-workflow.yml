name: Fetch Deployment Logs

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  fetch-logs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set variables
        id: vars
        run: |
          echo "PROJECT_NAME=tecnoesis-2024" >> $GITHUB_ENV
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
          echo "ACCOUNT_ID=a78f164886c715236ce6aad68eb42d3e" >> $GITHUB_ENV
          echo "PR_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Fetch Deployment Logs
        id: fetch_logs
        run: |
          fetch_latest_deployment() {
              RESPONSE=$(curl -s -X GET \
                  "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments" \
                  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                  -H "Content-Type: application/json")
              
              if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
                  LATEST_DEPLOYMENT=$(echo "$RESPONSE" | jq -c --arg branch "$PR_BRANCH" '.result | map(select(.deployment_trigger.metadata.branch == $branch)) | max_by(.created_on)')
                  echo "$LATEST_DEPLOYMENT"
              else
                  echo "Cloudflare API request failed. Response:"
                  echo "$RESPONSE" | jq '.'
                  exit 1
              fi
          }

          fetch_and_parse_deployment_logs() {
              DEPLOYMENT=$1
              if [ -z "$DEPLOYMENT" ]; then
                  echo "No deployments found for branch: $PR_BRANCH."
                  exit 0
              fi
              DEPLOYMENT_ID=$(echo "$DEPLOYMENT" | jq -r '.id')
              
              echo "Fetching deployment logs for deployment: $DEPLOYMENT_ID"
              
              LOGS_RESPONSE=$(curl -s -X GET \
                  "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments/$DEPLOYMENT_ID/history/logs" \
                  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                  -H "Content-Type: application/json")
              
              if echo "$LOGS_RESPONSE" | jq -e '.success == true' > /dev/null; then
                  LOG_OUTPUT="Deployment Log Summary:\n========================\n"
                  
                  TOTAL_LOGS=$(echo "$LOGS_RESPONSE" | jq -r '.result.total')
                  LOG_OUTPUT+="Total log entries: $TOTAL_LOGS\n\n"
                  
                  echo "$LOGS_RESPONSE" | jq -r '.result.data[] | "\(.ts) | \(.line)"' | while read -r log_entry; do
                      timestamp=$(echo "$log_entry" | cut -d'|' -f1 | xargs)
                      message=$(echo "$log_entry" | cut -d'|' -f2- | xargs)
                      
                      case "$message" in
                          "Cloning repository..."*)
                              LOG_OUTPUT+="\n[STEP] $message"
                              ;;
                          "Success: Finished cloning repository files")
                              LOG_OUTPUT+="[SUCCESS] $message\n"
                              ;;
                          "Installing project dependencies:"*)
                              LOG_OUTPUT+="\n[STEP] $message"
                              ;;
                          "Error:"*|"Failed:"*)
                              LOG_OUTPUT+="\n[ERROR] <span style='color:red;'>$message</span>"
                              ;;
                          *"ERR_PNPM"*)
                              LOG_OUTPUT+="[ERROR] <span style='color:red;'>$message</span>"
                              ;;
                          "Detected the following tools"*)
                              LOG_OUTPUT+="\n[INFO] $message"
                              ;;
                          *)
                              LOG_OUTPUT+="[$timestamp] $message"
                              ;;
                      esac
                  done

                  # Set the log output as an output variable
                  echo "log_output=$LOG_OUTPUT" >> $GITHUB_ENV
              else
                  echo "Failed to fetch deployment logs. API Response:"
                  echo "$LOGS_RESPONSE" | jq '.'
              fi
          }

          latest_deployment=$(fetch_latest_deployment)
          BUILD_LOGS=$(fetch_and_parse_deployment_logs "$latest_deployment")
          echo "logs<<EOF" >> $GITHUB_ENV
          echo "$BUILD_LOGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # - name: Comment on PR
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       const logMessage = process.env.log_output || 'No logs found.';
      #       const prNumber = context.payload.pull_request.number;
      #       await github.issues.createComment({
      #         issue_number: prNumber,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: logMessage.replace(/<span style='color:red;'>/g, '**').replace(/<\/span>/g, '**')
      #       })

      - name: Post build logs to PR
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildLogs = process.env.logs;
            const commentBody = `Cloudflare Pages build logs for branch **${{ github.head_ref }}**:\n\n${buildLogs}`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
